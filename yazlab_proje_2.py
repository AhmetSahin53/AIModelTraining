# -*- coding: utf-8 -*-
"""YazLab Proje 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18mU-UI_vXfbS9Jv1Ynh_MzzAz5DvlfmS
"""



def main():
    from IPython import get_ipython
    from IPython.display import display
    from google.colab import files
    import xml.etree.ElementTree as ET
    import pandas as pd
    from transformers import (
        BertTokenizer, BertForSequenceClassification,
        RobertaTokenizer, RobertaForSequenceClassification,
        DebertaTokenizer, DebertaForSequenceClassification,
        AlbertTokenizer, AlbertForSequenceClassification,
        TrainingArguments, Trainer
    )
    from datasets import Dataset
    from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc
    import matplotlib.pyplot as plt
    import seaborn as sns
    import torch

    # Veri Yükleme
    xml_path = "/content/drive/MyDrive/Bütün Tarifler.xml"
    tree = ET.parse(xml_path)
    root = tree.getroot()

    # XML'den DataFrame'e Dönüşüm
    data = []
    for ingredients in root.findall('Ingredients'):
        malzemeler = [ingredient.text for ingredient in ingredients.findall('Ingredient') if ingredient.text]
        data.append(" ".join(malzemeler))

    df = pd.DataFrame(data, columns=['malzemeler'])

    # Boş satırları temizle
    df = df[df['malzemeler'].str.strip() != ""]

    # Etiketleme Fonksiyonu
    def etiket_olustur(malzeme_listesi):
        if any(keyword in malzeme_listesi.lower() for keyword in ["yoğurt", "bulgur", "sumak"]):
            return "Turk"
        elif any(keyword in malzeme_listesi.lower() for keyword in ["soy sauce", "tofu", "ginger"]):
            return "Chinese"
        elif any(keyword in malzeme_listesi.lower() for keyword in ["parmesan", "basil", "olive oil"]):
            return "Italian"
        elif any(keyword in malzeme_listesi.lower() for keyword in ["fish and chips", "marmite", "cheddar"]):
            return "British"
        elif any(keyword in malzeme_listesi.lower() for keyword in ["wasabi", "nori", "sake"]):
            return "Japanese"
        return "Other"

    df['etiket'] = df['malzemeler'].apply(etiket_olustur)
    df['etiket'] = pd.factorize(df['etiket'])[0]

    if df.empty:
        raise ValueError("Veri çekme işlemi sonucunda DataFrame boş kaldı. XML dosyasındaki verileri kontrol edin.")

    def tokenize_function(examples, tokenizer):
        try:
            return tokenizer(
                examples['malzemeler'],
                padding='max_length',
                truncation=True,
                max_length=128
            )
        except Exception as e:
            print(f"Hata oluştu: {e}")
            print(f"Problemli veri: {examples}")
            raise

    model_classes = {
        'bert': (BertTokenizer, BertForSequenceClassification, 'bert-base-uncased'),
        'roberta': (RobertaTokenizer, RobertaForSequenceClassification, 'roberta-base'),
        'deberta': (DebertaTokenizer, DebertaForSequenceClassification, 'microsoft/deberta-base'),
        'albert': (AlbertTokenizer, AlbertForSequenceClassification, 'albert-base-v2')
    }

    for model_name, (TokenizerClass, ModelClass, pretrained_model_name) in model_classes.items():
        print(f"\nModel: {model_name}")

        tokenizer = TokenizerClass.from_pretrained(pretrained_model_name)
        model = ModelClass.from_pretrained(pretrained_model_name, num_labels=len(df['etiket'].unique()))

        dataset = Dataset.from_pandas(df)
        tokenized_dataset = dataset.map(
            lambda x: tokenize_function(x, tokenizer),
            batched=True,
            remove_columns=["malzemeler"]
        )
        tokenized_dataset = tokenized_dataset.rename_column('etiket', 'labels')

        train_test_split = tokenized_dataset.train_test_split(test_size=0.2)
        train_dataset = train_test_split['train']
        test_dataset = train_test_split['test']

        if len(train_dataset) == 0 or len(test_dataset) == 0:
            raise ValueError("Eğitim veya test veri seti boş. Etiketleme ve veri bölme işlemini kontrol edin.")

        training_args = TrainingArguments(
            output_dir=f"./results_{model_name}",
            evaluation_strategy="epoch",
            learning_rate=2e-5,
            per_device_train_batch_size=8,
            num_train_epochs=3,
            weight_decay=0.01,
            logging_dir=f"./logs_{model_name}",
            logging_steps=10,
        )

        trainer = Trainer(
            model=model,
            args=training_args,
            train_dataset=train_dataset,
            eval_dataset=test_dataset,
        )

        trainer.train()

        metrics = trainer.evaluate()
        print("Değerlendirme Metrikleri:", metrics)

        predictions, labels, _ = trainer.predict(test_dataset)
        predictions = torch.argmax(torch.tensor(predictions), axis=1)
        print(classification_report(labels, predictions))

        cm = confusion_matrix(labels, predictions)
        sns.heatmap(cm, annot=True, fmt='d')
        plt.title(f"Karmaşıklık Matrisi - {model_name}")
        plt.show()

        fpr, tpr, _ = roc_curve(labels, predictions, pos_label=1)
        roc_auc = auc(fpr, tpr)
        plt.plot(fpr, tpr, label=f"ROC curve (area = {roc_auc:.2f})")
        plt.title(f"ROC Eğrisi - {model_name}")
        plt.xlabel("False Positive Rate")
        plt.ylabel("True Positive Rate")
        plt.legend(loc="lower right")
        plt.show()


# main fonksiyonu çağrılıyor
main()